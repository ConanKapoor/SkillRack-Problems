#include<iostream>
using namespace std;
#include<math.h>
#include<iomanip>
#include<exception>
//Declaration of classes
struct point
{
double x;
double y;
point();
void get();
friend ostream& operator<<(ostream&,point);
};
class outofrange:public exception
{
public:
void what();
 
};
class polygon
{
protected:
int num_Of_Ver;
point* vertices;
public:
//initialize num_Of_Ver to 'n'
//allocate memory to store points of 'n' vertices
polygon(int n);
~polygon();
//get function cannot be defined here instead define in the derived class
void get();
//we return reference of the point so that assignment can be made
point& operator[](int idx);
double area();
};
class triangle : public polygon
{
public:
triangle():polygon(3){}
};
class quadrilateral : public polygon
{
public:
    quadrilateral():polygon(4){}
};
---------------------------------
---------------------------------
int main()
{
    triangle t;
    int index;
     
    t.get();
    cout<<fixed<<setprecision(2)<<t.area()<<endl;
    quadrilateral r;
    r.get();
    cout<<fixed<<setprecision(2)<<r.area()<<endl;
    cin>>index;
    try
    {
    cout<<r[index];
    }catch(outofrange o)
    {
    o.what();
    }
}